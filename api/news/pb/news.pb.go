// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/news/pb/news.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	api/news/pb/news.proto

It has these top-level messages:
	News
	PostNewsRequest
	PostNewsResponse
	GetNewsRequest
	GetNewsResponse
	GetNewsForUserRequest
	GetNewsForUserResponse
	DeleteNewsRequest
	DeleteNewsResponse
	UpdateNewsRequest
	UpdateNewsResponse
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type News struct {
	Id          string                      `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Title       string                      `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Description string                      `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	H1          string                      `protobuf:"bytes,4,opt,name=h1" json:"h1,omitempty"`
	Text        string                      `protobuf:"bytes,5,opt,name=text" json:"text,omitempty"`
	Published   bool                        `protobuf:"varint,6,opt,name=published" json:"published,omitempty"`
	UserId      string                      `protobuf:"bytes,7,opt,name=userId" json:"userId,omitempty"`
	CreatedAt   *google_protobuf1.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	UpdatedAt   *google_protobuf1.Timestamp `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
}

func (m *News) Reset()                    { *m = News{} }
func (m *News) String() string            { return proto.CompactTextString(m) }
func (*News) ProtoMessage()               {}
func (*News) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *News) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *News) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *News) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *News) GetH1() string {
	if m != nil {
		return m.H1
	}
	return ""
}

func (m *News) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *News) GetPublished() bool {
	if m != nil {
		return m.Published
	}
	return false
}

func (m *News) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *News) GetCreatedAt() *google_protobuf1.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *News) GetUpdatedAt() *google_protobuf1.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

type PostNewsRequest struct {
	News *News `protobuf:"bytes,1,opt,name=news" json:"news,omitempty"`
}

func (m *PostNewsRequest) Reset()                    { *m = PostNewsRequest{} }
func (m *PostNewsRequest) String() string            { return proto.CompactTextString(m) }
func (*PostNewsRequest) ProtoMessage()               {}
func (*PostNewsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PostNewsRequest) GetNews() *News {
	if m != nil {
		return m.News
	}
	return nil
}

type PostNewsResponse struct {
	News *News `protobuf:"bytes,1,opt,name=news" json:"news,omitempty"`
}

func (m *PostNewsResponse) Reset()                    { *m = PostNewsResponse{} }
func (m *PostNewsResponse) String() string            { return proto.CompactTextString(m) }
func (*PostNewsResponse) ProtoMessage()               {}
func (*PostNewsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PostNewsResponse) GetNews() *News {
	if m != nil {
		return m.News
	}
	return nil
}

type GetNewsRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetNewsRequest) Reset()                    { *m = GetNewsRequest{} }
func (m *GetNewsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetNewsRequest) ProtoMessage()               {}
func (*GetNewsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetNewsRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetNewsResponse struct {
	News *News `protobuf:"bytes,1,opt,name=news" json:"news,omitempty"`
}

func (m *GetNewsResponse) Reset()                    { *m = GetNewsResponse{} }
func (m *GetNewsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetNewsResponse) ProtoMessage()               {}
func (*GetNewsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetNewsResponse) GetNews() *News {
	if m != nil {
		return m.News
	}
	return nil
}

type GetNewsForUserRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *GetNewsForUserRequest) Reset()                    { *m = GetNewsForUserRequest{} }
func (m *GetNewsForUserRequest) String() string            { return proto.CompactTextString(m) }
func (*GetNewsForUserRequest) ProtoMessage()               {}
func (*GetNewsForUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GetNewsForUserRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type GetNewsForUserResponse struct {
	News []*News `protobuf:"bytes,1,rep,name=news" json:"news,omitempty"`
}

func (m *GetNewsForUserResponse) Reset()                    { *m = GetNewsForUserResponse{} }
func (m *GetNewsForUserResponse) String() string            { return proto.CompactTextString(m) }
func (*GetNewsForUserResponse) ProtoMessage()               {}
func (*GetNewsForUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GetNewsForUserResponse) GetNews() []*News {
	if m != nil {
		return m.News
	}
	return nil
}

type DeleteNewsRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteNewsRequest) Reset()                    { *m = DeleteNewsRequest{} }
func (m *DeleteNewsRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteNewsRequest) ProtoMessage()               {}
func (*DeleteNewsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *DeleteNewsRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DeleteNewsResponse struct {
}

func (m *DeleteNewsResponse) Reset()                    { *m = DeleteNewsResponse{} }
func (m *DeleteNewsResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteNewsResponse) ProtoMessage()               {}
func (*DeleteNewsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type UpdateNewsRequest struct {
	News *News `protobuf:"bytes,1,opt,name=news" json:"news,omitempty"`
}

func (m *UpdateNewsRequest) Reset()                    { *m = UpdateNewsRequest{} }
func (m *UpdateNewsRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateNewsRequest) ProtoMessage()               {}
func (*UpdateNewsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *UpdateNewsRequest) GetNews() *News {
	if m != nil {
		return m.News
	}
	return nil
}

type UpdateNewsResponse struct {
}

func (m *UpdateNewsResponse) Reset()                    { *m = UpdateNewsResponse{} }
func (m *UpdateNewsResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateNewsResponse) ProtoMessage()               {}
func (*UpdateNewsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func init() {
	proto.RegisterType((*News)(nil), "pb.News")
	proto.RegisterType((*PostNewsRequest)(nil), "pb.PostNewsRequest")
	proto.RegisterType((*PostNewsResponse)(nil), "pb.PostNewsResponse")
	proto.RegisterType((*GetNewsRequest)(nil), "pb.GetNewsRequest")
	proto.RegisterType((*GetNewsResponse)(nil), "pb.GetNewsResponse")
	proto.RegisterType((*GetNewsForUserRequest)(nil), "pb.GetNewsForUserRequest")
	proto.RegisterType((*GetNewsForUserResponse)(nil), "pb.GetNewsForUserResponse")
	proto.RegisterType((*DeleteNewsRequest)(nil), "pb.DeleteNewsRequest")
	proto.RegisterType((*DeleteNewsResponse)(nil), "pb.DeleteNewsResponse")
	proto.RegisterType((*UpdateNewsRequest)(nil), "pb.UpdateNewsRequest")
	proto.RegisterType((*UpdateNewsResponse)(nil), "pb.UpdateNewsResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NewsService service

type NewsServiceClient interface {
	PostNews(ctx context.Context, in *PostNewsRequest, opts ...grpc.CallOption) (*PostNewsResponse, error)
	GetNews(ctx context.Context, in *GetNewsRequest, opts ...grpc.CallOption) (*GetNewsResponse, error)
	GetNewsForUser(ctx context.Context, in *GetNewsForUserRequest, opts ...grpc.CallOption) (*GetNewsForUserResponse, error)
	DeleteNews(ctx context.Context, in *DeleteNewsRequest, opts ...grpc.CallOption) (*DeleteNewsResponse, error)
	UpdateNews(ctx context.Context, in *UpdateNewsRequest, opts ...grpc.CallOption) (*UpdateNewsResponse, error)
}

type newsServiceClient struct {
	cc *grpc.ClientConn
}

func NewNewsServiceClient(cc *grpc.ClientConn) NewsServiceClient {
	return &newsServiceClient{cc}
}

func (c *newsServiceClient) PostNews(ctx context.Context, in *PostNewsRequest, opts ...grpc.CallOption) (*PostNewsResponse, error) {
	out := new(PostNewsResponse)
	err := grpc.Invoke(ctx, "/pb.NewsService/PostNews", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsServiceClient) GetNews(ctx context.Context, in *GetNewsRequest, opts ...grpc.CallOption) (*GetNewsResponse, error) {
	out := new(GetNewsResponse)
	err := grpc.Invoke(ctx, "/pb.NewsService/GetNews", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsServiceClient) GetNewsForUser(ctx context.Context, in *GetNewsForUserRequest, opts ...grpc.CallOption) (*GetNewsForUserResponse, error) {
	out := new(GetNewsForUserResponse)
	err := grpc.Invoke(ctx, "/pb.NewsService/GetNewsForUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsServiceClient) DeleteNews(ctx context.Context, in *DeleteNewsRequest, opts ...grpc.CallOption) (*DeleteNewsResponse, error) {
	out := new(DeleteNewsResponse)
	err := grpc.Invoke(ctx, "/pb.NewsService/DeleteNews", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsServiceClient) UpdateNews(ctx context.Context, in *UpdateNewsRequest, opts ...grpc.CallOption) (*UpdateNewsResponse, error) {
	out := new(UpdateNewsResponse)
	err := grpc.Invoke(ctx, "/pb.NewsService/UpdateNews", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NewsService service

type NewsServiceServer interface {
	PostNews(context.Context, *PostNewsRequest) (*PostNewsResponse, error)
	GetNews(context.Context, *GetNewsRequest) (*GetNewsResponse, error)
	GetNewsForUser(context.Context, *GetNewsForUserRequest) (*GetNewsForUserResponse, error)
	DeleteNews(context.Context, *DeleteNewsRequest) (*DeleteNewsResponse, error)
	UpdateNews(context.Context, *UpdateNewsRequest) (*UpdateNewsResponse, error)
}

func RegisterNewsServiceServer(s *grpc.Server, srv NewsServiceServer) {
	s.RegisterService(&_NewsService_serviceDesc, srv)
}

func _NewsService_PostNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostNewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServiceServer).PostNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NewsService/PostNews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServiceServer).PostNews(ctx, req.(*PostNewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsService_GetNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServiceServer).GetNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NewsService/GetNews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServiceServer).GetNews(ctx, req.(*GetNewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsService_GetNewsForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNewsForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServiceServer).GetNewsForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NewsService/GetNewsForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServiceServer).GetNewsForUser(ctx, req.(*GetNewsForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsService_DeleteNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServiceServer).DeleteNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NewsService/DeleteNews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServiceServer).DeleteNews(ctx, req.(*DeleteNewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsService_UpdateNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServiceServer).UpdateNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NewsService/UpdateNews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServiceServer).UpdateNews(ctx, req.(*UpdateNewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NewsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.NewsService",
	HandlerType: (*NewsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostNews",
			Handler:    _NewsService_PostNews_Handler,
		},
		{
			MethodName: "GetNews",
			Handler:    _NewsService_GetNews_Handler,
		},
		{
			MethodName: "GetNewsForUser",
			Handler:    _NewsService_GetNewsForUser_Handler,
		},
		{
			MethodName: "DeleteNews",
			Handler:    _NewsService_DeleteNews_Handler,
		},
		{
			MethodName: "UpdateNews",
			Handler:    _NewsService_UpdateNews_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/news/pb/news.proto",
}

func init() { proto.RegisterFile("api/news/pb/news.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 538 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x55, 0x9c, 0x34, 0x1f, 0x13, 0x54, 0xc8, 0x24, 0x0d, 0xee, 0x52, 0x44, 0xe4, 0x5e, 0x22,
	0x0e, 0x76, 0x13, 0x24, 0x24, 0xb8, 0x55, 0x42, 0x20, 0x0e, 0x20, 0x08, 0x14, 0x8e, 0x95, 0x1d,
	0x0f, 0xcd, 0x4a, 0x69, 0xbc, 0x78, 0x37, 0x2d, 0x52, 0xd5, 0x0b, 0x7f, 0x81, 0x3b, 0x3f, 0x89,
	0x0b, 0x7f, 0x81, 0x1f, 0x82, 0x76, 0xbd, 0x4e, 0xe2, 0x24, 0x6a, 0x7b, 0xb2, 0xf7, 0xed, 0xbc,
	0x37, 0x33, 0xef, 0x69, 0xa1, 0x1b, 0x0a, 0x1e, 0xcc, 0xe8, 0x52, 0x06, 0x22, 0x32, 0x5f, 0x5f,
	0xa4, 0x89, 0x4a, 0xd0, 0x11, 0x11, 0x3b, 0x38, 0x4b, 0x92, 0xb3, 0x29, 0x05, 0xba, 0x24, 0x9c,
	0xcd, 0x12, 0x15, 0x2a, 0x9e, 0xcc, 0x6c, 0x05, 0x7b, 0x62, 0x6f, 0xcd, 0x29, 0x9a, 0x7f, 0x0b,
	0x14, 0x3f, 0x27, 0xa9, 0xc2, 0x73, 0x91, 0x15, 0x78, 0xbf, 0x1d, 0xa8, 0xbc, 0xa7, 0x4b, 0x89,
	0xbb, 0xe0, 0xf0, 0xd8, 0x2d, 0xf5, 0x4a, 0xfd, 0xc6, 0xc8, 0xe1, 0x31, 0x76, 0x60, 0x47, 0x71,
	0x35, 0x25, 0xd7, 0x31, 0x50, 0x76, 0xc0, 0x1e, 0x34, 0x63, 0x92, 0xe3, 0x94, 0x0b, 0xdd, 0xc5,
	0x2d, 0x9b, 0xbb, 0x55, 0x48, 0xeb, 0x4c, 0x06, 0x6e, 0x25, 0xd3, 0x99, 0x0c, 0x10, 0xa1, 0xa2,
	0xe8, 0x87, 0x72, 0x77, 0x0c, 0x62, 0xfe, 0xf1, 0x00, 0x1a, 0x62, 0x1e, 0x4d, 0xb9, 0x9c, 0x50,
	0xec, 0x56, 0x7b, 0xa5, 0x7e, 0x7d, 0xb4, 0x04, 0xb0, 0x0b, 0xd5, 0xb9, 0xa4, 0xf4, 0x6d, 0xec,
	0xd6, 0x0c, 0xc7, 0x9e, 0xf0, 0x05, 0xc0, 0x38, 0xa5, 0x50, 0x51, 0x7c, 0x1a, 0x2a, 0xb7, 0xde,
	0x2b, 0xf5, 0x9b, 0x43, 0xe6, 0x67, 0x0b, 0xfa, 0xf9, 0x82, 0xfe, 0xe7, 0x7c, 0xc1, 0x51, 0xc3,
	0x56, 0x1f, 0x2b, 0x4d, 0x9d, 0x8b, 0x38, 0xa7, 0x36, 0x6e, 0xa7, 0xda, 0xea, 0x63, 0xe5, 0x05,
	0x70, 0xff, 0x43, 0x22, 0x95, 0xf6, 0x68, 0x44, 0xdf, 0xe7, 0x24, 0xf5, 0xf8, 0x15, 0x1d, 0x82,
	0x31, 0xab, 0x39, 0xac, 0xfb, 0x22, 0xf2, 0xcd, 0xb5, 0x41, 0xbd, 0x23, 0x78, 0xb0, 0x24, 0x48,
	0x91, 0xcc, 0x24, 0xdd, 0xc2, 0xe8, 0xc1, 0xee, 0x1b, 0x2a, 0x74, 0x58, 0x0b, 0x43, 0x0f, 0xb1,
	0xa8, 0xb8, 0x93, 0xe4, 0x11, 0xec, 0x59, 0xc2, 0xeb, 0x24, 0x3d, 0x91, 0x94, 0xe6, 0xca, 0x0f,
	0xa1, 0xa6, 0xed, 0x3c, 0x5d, 0xc8, 0x5b, 0x77, 0xbd, 0xe7, 0xd0, 0x5d, 0x67, 0x6c, 0x74, 0x2a,
	0x6f, 0xe9, 0x74, 0x08, 0xad, 0x57, 0x34, 0x25, 0x45, 0x37, 0xcd, 0xdf, 0x01, 0x5c, 0x2d, 0xca,
	0x84, 0xbd, 0x01, 0xb4, 0x4e, 0x8c, 0xcf, 0x77, 0x37, 0xb7, 0x03, 0xb8, 0x4a, 0xc9, 0x84, 0x86,
	0x7f, 0xca, 0xd0, 0xd4, 0xc0, 0x27, 0x4a, 0x2f, 0xf8, 0x98, 0xf0, 0x23, 0xd4, 0xf3, 0x08, 0xb0,
	0xad, 0x15, 0xd6, 0x12, 0x64, 0x9d, 0x22, 0x68, 0xe7, 0x61, 0x3f, 0xff, 0xfe, 0xfb, 0xe5, 0x74,
	0xbc, 0x7b, 0xe6, 0x31, 0x5d, 0x0c, 0xcc, 0x53, 0x7b, 0x69, 0x1a, 0xe3, 0x3b, 0xa8, 0x59, 0x7b,
	0x10, 0x35, 0xb9, 0x18, 0x18, 0x6b, 0x17, 0x30, 0xab, 0xb7, 0x6f, 0xf4, 0xda, 0xd8, 0x5a, 0xd5,
	0x0b, 0xae, 0x78, 0x7c, 0x8d, 0xd3, 0x45, 0xe4, 0xd6, 0x6d, 0xdc, 0x5f, 0x51, 0x28, 0x66, 0xc6,
	0xd8, 0xb6, 0x2b, 0xdb, 0xe3, 0xd0, 0xf4, 0x78, 0x8c, 0x8f, 0x0a, 0x3d, 0x74, 0xa6, 0xc1, 0x95,
	0x0d, 0xfa, 0x1a, 0xbf, 0x00, 0x2c, 0xed, 0xc7, 0x3d, 0x2d, 0xb7, 0x91, 0x19, 0xeb, 0xae, 0xc3,
	0xc5, 0x2d, 0x9e, 0x6e, 0xd9, 0xe2, 0x2b, 0xc0, 0x32, 0x8d, 0x4c, 0x77, 0x23, 0xd0, 0x4c, 0x77,
	0x33, 0xb4, 0xdc, 0x6d, 0xb6, 0xc5, 0xed, 0xa8, 0x6a, 0xde, 0xe4, 0xb3, 0xff, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x98, 0xeb, 0x85, 0x9e, 0xf9, 0x04, 0x00, 0x00,
}
